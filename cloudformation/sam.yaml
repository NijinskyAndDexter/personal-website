AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Rebecca Kelley Personal Website

Parameters: 
  bucketName: 
    Description: Bucket used to serve static files for personal website front end
    Type: String
  subdomain: 
    Description: subdomain of the website
    Type: String
    Default: about
  route53ZoneName: 
    Description: domain of the website
    Type: String
    Default: rebecca-kelley.io
  acmCertificateArn:
    Description: the ARN of the ACM certificate used for the fully qualified domain of this site
    Type: String

Resources:
  CfDistribution:
      Type: AWS::CloudFront::Distribution
      DependsOn: [S3Bucket, CfOriginAccessIdentity]
      Metadata:
        Comment: !Sub ${AWS::StackName}
      Properties:
        DistributionConfig:
          Comment: !Sub ${AWS::StackName}
          DefaultRootObject: index.html
          Aliases: [!Join ['.', [!Ref subdomain, !Ref route53ZoneName]]]
          Enabled: true
          HttpVersion: http2
          IPV6Enabled: false
          PriceClass: PriceClass_100
          ViewerCertificate:
            AcmCertificateArn: !Sub ${acmCertificateArn} 
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2019
          Origins:
            - DomainName: !GetAtt S3Bucket.DomainName
              Id: static-content-s3-origin
              OriginPath: ''
              S3OriginConfig:
                OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CfOriginAccessIdentity}
          DefaultCacheBehavior:
            AllowedMethods: [HEAD, GET]
            CachedMethods: [HEAD, GET]
            Compress: false
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
            TargetOriginId: static-content-s3-origin
            ViewerProtocolPolicy: redirect-to-https
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html

  CfOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Metadata:
      Comment: !Sub ${AWS::StackName}
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub ${AWS::StackName}

  CustomDNSEntry:
    Type: AWS::Route53::RecordSetGroup
    DependsOn: [CfDistribution]
    Properties:
      HostedZoneName: !Sub ${route53ZoneName}.
      RecordSets:
      - Name: !Sub '${subdomain}.${route53ZoneName}'
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 # This value is always used to route to a cloudfront entry
          DNSName: !GetAtt CfDistribution.DomainName

  S3Bucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Metadata:
        Comment: !Sub ${AWS::StackName} static website bucket.
      Properties:
        AccessControl: Private
        BucketName: !Sub ${bucketName}

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: [S3Bucket, CfOriginAccessIdentity]
    Metadata:
      Comment: Bucket policy to allow cloudfront to access the data
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CfOriginAccessIdentity.S3CanonicalUserId
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}/*
